/// <reference types="react" />
import * as React from 'react';
import { Align } from './Align';
import { Collision } from './Collision';
import { Offset } from './Offset';
import { OpenEvent, CloseEvent } from './Events';
/**
 * Represents the props of the Popup component for React.
 */
export interface PopupProps {
    /**
     * Controls the Popup animation. By default, the opening and closing animations are enabled.
     */
    animate?: boolean;
    /**
     * Specifies the element which will be used as an anchor. The Popup opens next to that element.
     */
    anchor?: React.Component | HTMLElement;
    /**
     * Specifies the pivot point of the anchor.
     */
    anchorAlign?: Align;
    /**
     * Defines the container to which the Popup will be appended.
     * Defaults to [`body`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body).
     */
    appendTo?: React.Component | HTMLElement;
    /**
     * Configures the collision behavior of the Popup.
     */
    collision?: Collision;
    /**
     * Specifies the pivot point of the Popup.
     */
    popupAlign?: Align;
    /**
     * Specifies a list of CSS classes that will be added to the Popup element.
     */
    className?: string | Array<string>;
    /**
     * Specifies the id that will be added to the Popup element.
     */
    id?: string;
    /**
     * Specifies a list of CSS classes that will be added to the internal animated element.
     */
    popupClass?: string | Array<string>;
    /**
     * Represents the styles that are applied to the Popup.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the absolute position of the element. The Popup opens next to that point.
     *
     * The pivot point of the Popup is defined by the `popupAlign` configuration option.
     * The boundary detection is applied by using the window viewport.
     */
    offset?: Offset;
    /**
     * Controls the Popup visibility. Defaults to `false`.
     */
    show?: boolean;
    /**
     * Fires after the Popup is opened and the opening animation ends.
     */
    open?: (event: OpenEvent) => void;
    /**
     * Fires after the Popup is closed.
     */
    close?: (event: CloseEvent) => void;
}
