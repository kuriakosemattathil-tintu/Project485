/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { AutoCompleteProps } from './AutoCompleteProps';
import { DropDownStateBase, InternalState } from './../common/settings';
/**
 * @hidden
 */
export interface AutoCompleteState extends DropDownStateBase {
    focusedIndex?: number;
}
/**
 * @hidden
 */
export interface AutoCompleteInternalState extends InternalState {
    data: AutoCompleteState;
}
export default class AutoComplete extends React.Component<AutoCompleteProps, AutoCompleteState> {
    /**
     * @hidden
     */
    static propTypes: {
        suggest: PropTypes.Requireable<any>;
        placeholder: PropTypes.Requireable<any>;
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        readonly: PropTypes.Requireable<any>;
        opened: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        data: PropTypes.Requireable<any>;
        textField: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        label: PropTypes.Requireable<any>;
        loading: PropTypes.Requireable<any>;
        popupSettings: PropTypes.Requireable<any>;
        onOpen: PropTypes.Requireable<any>;
        onClose: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        itemRender: PropTypes.Requireable<any>;
        listNoDataRender: PropTypes.Requireable<any>;
        header: PropTypes.Requireable<any>;
        footer: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        tabIndex: number;
        popupSettings: {
            animate: boolean;
            height: string;
        };
    };
    private readonly combobox;
    private _element;
    private _inputId;
    private _suggested;
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    /**
     * Represents the value of the AutoComplete.
     */
    readonly value: string;
    constructor(props: AutoCompleteProps);
    /**
     * @hidden
     */
    componentWillReceiveProps(nextProps: AutoCompleteProps): void;
    /**
     * @hidden
     */
    componentWillUpdate(_nextProps: AutoCompleteProps, nextState: AutoCompleteState): void;
    /**
     * @hidden
     */
    componentDidUpdate(_prevProps: AutoCompleteProps, prevState: AutoCompleteState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    handleItemSelect: (index: number, state: AutoCompleteInternalState) => void;
    /**
     * @hidden
     */
    itemFocus: (index: number, state: AutoCompleteInternalState) => void;
    /**
     * @hidden
     */
    togglePopup: (state: InternalState) => void;
    /**
     * @hidden
     */
    onNavigate(event: React.KeyboardEvent<HTMLElement>): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    applyInputValue(value: string, state: AutoCompleteInternalState, eventKey?: number): void;
    private getFocusedIndex(value?, data?);
    private renderSearchBar(clearButton, value);
    private renderListContainer();
    private renderList();
    private onChangeHandler;
    private clearButtonClick;
    private forceUpdateIfNeeded(state);
    private suggestValue(value);
    private setValue(value);
    private controlled();
}
