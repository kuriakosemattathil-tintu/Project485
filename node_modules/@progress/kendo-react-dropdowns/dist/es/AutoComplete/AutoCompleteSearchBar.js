var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';
import { messages, clear } from '../messages';
/**
 * @hidden
 */
var AutoCompleteSearchBar = /** @class */ (function (_super) {
    __extends(AutoCompleteSearchBar, _super);
    function AutoCompleteSearchBar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueChanged = false;
        _this.deleting = false;
        return _this;
    }
    AutoCompleteSearchBar.prototype.componentWillUpdate = function (nextProps, _) {
        var _a = this.props, value = _a.value, suggestedText = _a.suggestedText;
        var nextValue = nextProps.value;
        var nextSuggestedText = nextProps.suggestedText;
        this.valueChanged = value !== nextValue || nextSuggestedText !== suggestedText;
        this.deleting = this.valueChanged && value.startsWith(nextValue) &&
            !(suggestedText && nextSuggestedText && suggestedText.endsWith(nextSuggestedText));
    };
    AutoCompleteSearchBar.prototype.componentDidUpdate = function () {
        var _a = this.props, value = _a.value, suggestedText = _a.suggestedText;
        var input = this.input;
        if (suggestedText && this.valueChanged && !this.deleting && input) {
            input.setSelectionRange(value.length - suggestedText.length, value.length);
        }
    };
    AutoCompleteSearchBar.prototype.render = function () {
        var _this = this;
        var _a = this.props, id = _a.id, placeholder = _a.placeholder, tabIndex = _a.tabIndex, value = _a.value, onKeyDown = _a.onKeyDown, onChange = _a.onChange, onFocus = _a.onFocus, onBlur = _a.onBlur, disabled = _a.disabled, readOnly = _a.readOnly, expanded = _a.expanded, owns = _a.owns, activedescendant = _a.activedescendant, clearButton = _a.clearButton, clearButtonClick = _a.clearButtonClick;
        return ([(React.createElement("span", { className: "k-searchbar", key: "searchbar" },
                React.createElement("input", { autoComplete: "off", id: id, type: "text", placeholder: placeholder, className: "k-input", tabIndex: tabIndex, role: "listbox", value: value, onChange: onChange, ref: function (input) { _this.input = input; }, onKeyDown: onKeyDown, onFocus: onFocus, onBlur: onBlur, "aria-disabled": disabled || undefined, disabled: disabled || undefined, readOnly: readOnly || undefined, "aria-haspopup": true, "aria-expanded": expanded || false, "aria-owns": owns, "aria-activedescendant": activedescendant }))), (clearButton && (React.createElement("span", { className: "k-icon k-clear-value k-i-close", role: "button", onClick: clearButtonClick, onMouseDown: function (event) { event.preventDefault(); }, tabIndex: -1, title: provideLocalizationService(this).toLanguageString(clear, messages[clear]), key: "clearbutton" })))]);
    };
    return AutoCompleteSearchBar;
}(React.Component));
export default AutoCompleteSearchBar;
registerForLocalization(AutoCompleteSearchBar);
//# sourceMappingURL=AutoCompleteSearchBar.js.map