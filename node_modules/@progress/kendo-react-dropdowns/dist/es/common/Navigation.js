import { isPresent } from './util';
var MIN_INDEX = 0;
/**
 * @hidden
 */
var NavigationData = /** @class */ (function () {
    function NavigationData(index, event, action) {
        this.index = index;
        this.event = event;
        this.action = action;
    }
    return NavigationData;
}());
export { NavigationData };
/**
 * @hidden
 */
export var NavigationAction;
(function (NavigationAction) {
    NavigationAction[NavigationAction["Undefined"] = 0] = "Undefined";
    NavigationAction[NavigationAction["Open"] = 1] = "Open";
    NavigationAction[NavigationAction["Close"] = 2] = "Close";
    NavigationAction[NavigationAction["Enter"] = 3] = "Enter";
    NavigationAction[NavigationAction["Space"] = 4] = "Space";
    NavigationAction[NavigationAction["Tab"] = 5] = "Tab";
    NavigationAction[NavigationAction["Esc"] = 6] = "Esc";
    NavigationAction[NavigationAction["Delete"] = 7] = "Delete";
    NavigationAction[NavigationAction["Backspace"] = 8] = "Backspace";
    NavigationAction[NavigationAction["Home"] = 9] = "Home";
    NavigationAction[NavigationAction["End"] = 10] = "End";
    NavigationAction[NavigationAction["Up"] = 11] = "Up";
    NavigationAction[NavigationAction["Down"] = 12] = "Down";
    NavigationAction[NavigationAction["Left"] = 13] = "Left";
    NavigationAction[NavigationAction["Right"] = 14] = "Right";
})(NavigationAction || (NavigationAction = {}));
/**
 * @hidden
 */
var Navigation = /** @class */ (function () {
    function Navigation() {
    }
    Navigation.prototype.navigate = function (options) {
        var navigationData = this.process({
            current: options.currentIndex,
            max: options.max,
            min: options.min,
            event: options.event
        });
        var action = navigationData.action;
        if (action !== NavigationAction.Undefined) {
            if ((action === NavigationAction.Open && !options.opened) ||
                (action === NavigationAction.Close && options.opened) ||
                (options.event.keyCode === 13 /* enter */ || options.event.keyCode === 32 /* space */)) {
                options.togglePopup(options.state);
            }
            else if (navigationData.index !== undefined) {
                options.handleItemSelect(navigationData.index, options.state);
            }
        }
        var leftRightKeys = (action === NavigationAction.Left) || (action === NavigationAction.Right);
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Tab &&
            action !== NavigationAction.Backspace &&
            action !== NavigationAction.Delete &&
            !(leftRightKeys && options.leftRightKeysNavigation) &&
            (action !== NavigationAction.Enter || (action === NavigationAction.Enter && options.opened))) {
            options.event.preventDefault();
        }
    };
    Navigation.prototype.process = function (args) {
        var event = args.event;
        var keyCode = event.keyCode;
        var altKey = event.altKey;
        var index = undefined;
        var action = NavigationAction.Undefined;
        if (altKey && keyCode === 40 /* down */) {
            action = NavigationAction.Open;
        }
        else if (altKey && keyCode === 38 /* up */) {
            action = NavigationAction.Close;
        }
        else if (keyCode === 13 /* enter */) {
            action = NavigationAction.Enter;
        }
        else if (keyCode === 32 /* space */) {
            action = NavigationAction.Space;
        }
        else if (keyCode === 27 /* esc */) {
            action = NavigationAction.Close;
        }
        else if (keyCode === 9 /* tab */) {
            action = NavigationAction.Tab;
        }
        else if (keyCode === 38 /* up */) {
            index = this.next({ current: args.current, min: args.min, max: args.max, step: -1 });
            action = NavigationAction.Up;
        }
        else if (keyCode === 37 /* left */) {
            index = this.next({ current: args.current, min: args.min, max: args.max, step: -1 });
            action = NavigationAction.Left;
        }
        else if (keyCode === 40 /* down */) {
            index = this.next({ current: args.current, min: args.min, max: args.max, step: 1 });
            action = NavigationAction.Down;
        }
        else if (keyCode === 39 /* right */) {
            index = this.next({ current: args.current, min: args.min, max: args.max, step: 1 });
            action = NavigationAction.Right;
        }
        else if (keyCode === 36 /* home */) {
            index = MIN_INDEX;
            action = NavigationAction.Home;
        }
        else if (keyCode === 35 /* end */) {
            index = args.max;
            action = NavigationAction.End;
        }
        else if (keyCode === 46 /* delete */) {
            action = NavigationAction.Delete;
        }
        else if (keyCode === 8 /* backspace */) {
            action = NavigationAction.Backspace;
        }
        return new NavigationData(index, event, action);
    };
    Navigation.prototype.next = function (args) {
        if (!isPresent(args.current)) {
            return args.min;
        }
        else {
            return Math.min(args.max, Math.max(args.current + args.step, args.min));
        }
    };
    return Navigation;
}());
export { Navigation };
//# sourceMappingURL=Navigation.js.map