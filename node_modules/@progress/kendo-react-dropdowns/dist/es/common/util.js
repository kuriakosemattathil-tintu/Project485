/**
 * @hidden
 */
var isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
var getter = function (dataItem, field, usePrimitive) {
    if (usePrimitive === void 0) { usePrimitive = false; }
    if (isPresent(dataItem)) {
        if (usePrimitive) {
            return field && isPresent(dataItem[field]) ? dataItem[field] : dataItem;
        }
        else {
            return field ? dataItem[field] : dataItem;
        }
    }
};
/**
 * @hidden
 */
var sameCharsOnly = function (word, character) {
    for (var idx = 0; idx < word.length; idx++) {
        if (word.charAt(idx) !== character) {
            return false;
        }
    }
    return true;
};
/**
 * @hidden
 */
var shuffleData = function (data, splitIndex, defaultItem) {
    var result = data;
    if (defaultItem) {
        result = [defaultItem].concat(result);
    }
    return result.slice(splitIndex).concat(result.slice(0, splitIndex));
};
/**
 * @hidden
 */
var matchText = function (text, word, ignoreCase) {
    if (!isPresent(text)) {
        return false;
    }
    var temp = String(text);
    if (ignoreCase) {
        temp = temp.toLowerCase();
    }
    return temp.indexOf(word) === 0;
};
/**
 * @hidden
 */
var primitiveTypes = ['string', 'number', 'undefined'];
/**
 * @hidden
 */
var isPrimitive = function (value) {
    var type = typeof value;
    return primitiveTypes.indexOf(type) !== -1;
};
/**
 * @hidden
 */
var scrollToItem = function (scrollElem, itemHeight, itemIndex, translate, virtualScroll) {
    var viewportHeight = scrollElem.offsetHeight;
    var itemOffsetTop = (itemHeight * itemIndex) +
        (virtualScroll ? translate - scrollElem.scrollTop : 0);
    if (virtualScroll) {
        var diff = 0;
        if (itemOffsetTop + itemHeight > viewportHeight) {
            diff = itemOffsetTop + itemHeight - viewportHeight;
        }
        else if (itemOffsetTop < 0) {
            diff = itemOffsetTop;
        }
        if (diff !== 0) {
            scrollElem.scrollTop += diff;
        }
        else if (scrollElem.scrollTop === 0 && translate !== 0) {
            scrollElem.scrollTop = translate;
        }
    }
    else {
        if (itemOffsetTop + itemHeight > viewportHeight + scrollElem.scrollTop) {
            scrollElem.scrollTop = (itemOffsetTop + itemHeight - viewportHeight);
        }
        else if (itemOffsetTop < scrollElem.scrollTop) {
            scrollElem.scrollTop -= scrollElem.scrollTop - itemOffsetTop;
        }
    }
};
/**
 * @hidden
 */
var itemIndexStartsWith = function (text, items, field) {
    var result = -1;
    if (text) {
        text = text.toLowerCase();
        for (var i = 0; i < items.length; i++) {
            var itemText = (getter(items[i], field, isPrimitive(items[i])) || '') + '';
            if (itemText && itemText.toLowerCase().startsWith(text)) {
                result = i;
                break;
            }
        }
    }
    return result;
};
/**
 * @hidden
 */
var getItemIndex = function (props, value) {
    var valueField = props.valueField;
    var data = props.data || [];
    return data.findIndex(function (item) {
        return item === value || getter(item, valueField) === value;
    });
};
/**
 * @hidden
 */
var getItemIndexByText = function (data, text, textField, matchCase) {
    var casing = function (value) { return matchCase ? value : value.toLowerCase(); };
    return data.findIndex(function (item) {
        return isPrimitive(item) ? casing(text) === casing(item.toString()) :
            casing(getItemText(item, textField)) === casing(text);
    });
};
/**
 * @hidden
 */
var getItemText = function (item, textField) {
    return isPrimitive(item) ? item : getter(item, textField);
};
/**
 * @hidden
 */
var getItemValue = function (item, valueField) {
    return valueField ? getter(item, valueField) : item;
};
/**
 * @hidden
 */
var getText = function (props, index) {
    if (!props.data) {
        return null;
    }
    if (index === -1) {
        return getItemText(props.defaultItem, props.textField);
    }
    var item = props.data[index];
    return getItemText(item, props.textField);
};
/**
 * @hidden
 */
var getValue = function (props, index) {
    if (index === -1) {
        return getItemValue(props.defaultItem, props.valueField);
    }
    if (props.data) {
        var item = props.data[index];
        return getItemValue(item, props.valueField);
    }
};
export { isPresent, getter, sameCharsOnly, shuffleData, matchText, isPrimitive, scrollToItem, itemIndexStartsWith, getItemIndex, getItemIndexByText, getItemText, getItemValue, getText, getValue };
//# sourceMappingURL=util.js.map