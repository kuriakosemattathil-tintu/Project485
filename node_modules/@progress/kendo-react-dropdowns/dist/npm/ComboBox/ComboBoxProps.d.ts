/// <reference types="react" />
import ComboBox from './ComboBox';
import { FilterChangeEvent, ChangeEvent, OpenEvent, CloseEvent, FocusEvent, BlurEvent, PageChangeEvent } from './../common/events';
import { VirtualizationSettings, PopupSettings } from '../common/settings';
import { ListItemProps } from '../common/ListItem';
/**
 * Represents the object of the `FilterChange` ComboBox event.
 */
export interface ComboBoxFilterChangeEvent extends FilterChangeEvent<ComboBox> {
}
/**
 * Represents the object of the `change` ComboBox event.
 */
export interface ComboBoxChangeEvent extends ChangeEvent<ComboBox> {
}
/**
 * Represents the object of the `open` ComboBox event.
 */
export interface ComboBoxOpenEvent extends OpenEvent<ComboBox> {
}
/**
 * Represents the object of the `close` ComboBox event.
 */
export interface ComboBoxCloseEvent extends CloseEvent<ComboBox> {
}
/**
 * Represents the object of the `focus` ComboBox event.
 */
export interface ComboBoxFocusEvent extends FocusEvent<ComboBox> {
}
/**
 * Represents the object of the `blur` ComboBox event.
 */
export interface ComboBoxBlurEvent extends BlurEvent<ComboBox> {
}
/**
 * Represents the object of the `PageChange` ComboBox event.
 */
export interface ComboBoxPageChangeEvent extends PageChangeEvent<ComboBox> {
}
/**
 * Represents the props of the Kendo UI ComboBox for React.
 */
export interface ComboBoxProps {
    /**
     * Sets the data of the ComboBox.
     */
    data?: any[];
    /**
     * Sets the opened and closed state of the ComboBox.
     */
    opened?: boolean;
    /**
     * The styles that are applied to the ComboBox.
     */
    style?: React.CSSProperties;
    /**
     * Sets the value of the ComboBox.
     * It can either be of the primitive (string, numbers) or of the complex (objects) type.
     */
    value?: any;
    /**
     * Sets the default value of the ComboBox.
     * Similar to the native `select` HTML element.
     */
    defaultValue?: any;
    /**
     * Sets additional classes to the ComboBox.
     */
    className?: string;
    /**
     * Sets CSS classes to the expand `icon` DOM element.
     */
    iconClassName?: string;
    /**
     * If set to `true`, renders a button on hovering over the component.
     * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.
     */
    clearButton?: boolean;
    /**
     * The hint that is displayed when the component is empty.
     */
    placeholder?: string;
    /**
     * Enables the auto-completion of the text based on the first data item.
     */
    suggest?: boolean;
    /**
     * Specifies whether the ComboBox allows user-defined values that are not present in the dataset.
     * The default value is `false`.
     */
    allowCustom?: boolean;
    /**
     * Sets the disabled state of the ComboBox.
     */
    disabled?: boolean;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Enables the filtering functionality of the ComboBox.
     */
    filterable?: boolean;
    /**
     * Sets the value of filtering input.
     * Useful for making the filtering input a
     * [controlled component](https://reactjs.org/docs/forms.html#controlled-components).
     */
    filter?: string;
    /**
     * Sets the loading state of the ComboBox.
     */
    loading?: boolean;
    /**
     * Specifies the `tabIndex` of the ComboBox.
     */
    tabIndex?: number;
    /**
     * Sets the data item field that represents the item text.
     * If the data contains only primitive values, do not define it.
     */
    textField?: string;
    /**
     * Sets the data item field that represents the item value.
     * If the data contains only primitive values, do not define it.
     */
    valueField?: string;
    /**
     * Renders a floating label for the ComboBox component.
     */
    label?: string;
    /**
     * Configures the popup of the ComboBox.
     */
    popupSettings?: PopupSettings;
    /**
     * Configures the virtual scrolling of the ComboBox.
     */
    virtual?: VirtualizationSettings;
    /**
     * Fires each time the popup of the ComboBox is about to open.
     */
    onOpen?: (event: ComboBoxOpenEvent) => void;
    /**
     * Fires each time the popup of the ComboBox is about to close.
     */
    onClose?: (event: ComboBoxCloseEvent) => void;
    /**
     * Fires each time the user focuses the ComboBox.
     */
    onFocus?: (event: ComboBoxFocusEvent) => void;
    /**
     * Fires each time the ComboBox gets blurred.
     */
    onBlur?: (event: ComboBoxBlurEvent) => void;
    /**
     * Fires each time the value of the ComboBox is about to change.
     */
    onChange?: (event: ComboBoxChangeEvent) => void;
    /**
     * Fires each time the user types in the filter input.
     * You can filter the source based on the passed filtration value.
     */
    onFilterChange?: (event: ComboBoxFilterChangeEvent) => void;
    /**
     * Fires when both the virtual scrolling of the ComboBox is enabled
     * and the component requires data for another page.
     */
    onPageChange?: (event: ComboBoxPageChangeEvent) => void;
    /**
     * Fires when a ComboBox list item is about to be rendered.
     * Used to override the default appearance of the list items.
     */
    itemRender?: (li: React.ReactElement<HTMLLIElement>, itemProps: ListItemProps) => React.ReactNode;
    /**
     * Fires when the element which indicates no data in the popup is about to be rendered.
     * Used to override the default appearance of the element.
     */
    listNoDataRender?: (element: React.ReactElement<HTMLDivElement>) => React.ReactNode;
    /**
     * Sets the header component of the ComboBox.
     */
    header?: React.ReactNode;
    /**
     * Sets the footer component of the ComboBox.
     */
    footer?: React.ReactNode;
}
