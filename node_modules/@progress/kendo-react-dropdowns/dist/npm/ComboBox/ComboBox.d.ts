/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ComboBoxProps } from './ComboBoxProps';
import { DropDownStateBase, InternalState } from './../common/settings';
/**
 * @hidden
 */
export interface ComboBoxState extends DropDownStateBase {
    suggestedText?: string;
    typedText?: string;
}
/**
 * @hidden
 */
export interface ComboInternalState extends InternalState {
    data: ComboBoxState;
}
export default class ComboBox extends React.Component<ComboBoxProps, ComboBoxState> {
    /**
     * @hidden
     */
    static propTypes: {
        allowCustom: PropTypes.Requireable<any>;
        clearButton: PropTypes.Requireable<any>;
        iconClassName: PropTypes.Requireable<any>;
        suggest: PropTypes.Requireable<any>;
        placeholder: PropTypes.Requireable<any>;
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<any>;
        valueField: PropTypes.Requireable<any>;
        virtual: PropTypes.Requireable<any>;
        onFilterChange: PropTypes.Requireable<any>;
        onPageChange: PropTypes.Requireable<any>;
        opened: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        data: PropTypes.Requireable<any>;
        textField: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        label: PropTypes.Requireable<any>;
        loading: PropTypes.Requireable<any>;
        popupSettings: PropTypes.Requireable<any>;
        onOpen: PropTypes.Requireable<any>;
        onClose: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        itemRender: PropTypes.Requireable<any>;
        listNoDataRender: PropTypes.Requireable<any>;
        header: PropTypes.Requireable<any>;
        footer: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        allowCustom: boolean;
        clearButton: boolean;
        tabIndex: number;
        popupSettings: {
            animate: boolean;
            height: string;
        };
    };
    private readonly combobox;
    private _element;
    private _inputId;
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    /**
     * ComboBox value
     */
    readonly value: any;
    /**
     * The index of the selected item
     */
    readonly index: number;
    constructor(props: ComboBoxProps);
    /**
     * @hidden
     */
    componentWillReceiveProps(nextProps: ComboBoxProps): void;
    /**
     * @hidden
     */
    componentWillUpdate(nextProps: ComboBoxProps, nextState: ComboBoxState): void;
    /**
     * @hidden
     */
    componentDidUpdate(_: ComboBoxProps, prevState: ComboBoxState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    handleItemSelect: (index: number, state: ComboInternalState) => void;
    /**
     * @hidden
     */
    togglePopup: (state: ComboInternalState) => void;
    /**
     * @hidden
     */
    onNavigate(event: React.KeyboardEvent<HTMLElement>): void;
    /**
     * @hidden
     */
    setValueSelection: (value: any, text: any, selected: any, state: ComboInternalState) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    applyInputValue(value: string, state: ComboInternalState, eventKey?: number): void;
}
