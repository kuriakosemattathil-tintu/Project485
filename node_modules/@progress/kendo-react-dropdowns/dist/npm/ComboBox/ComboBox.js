"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var DropDownBase_1 = require("../common/DropDownBase");
var ComboBoxBase_1 = require("../common/ComboBoxBase");
var util_1 = require("../common/util");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var ComboBox = /** @class */ (function (_super) {
    __extends(ComboBox, _super);
    function ComboBox(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.handleItemSelect = function (index, state) {
            _this.combobox.handleItemSelect(index, state);
        };
        /**
         * @hidden
         */
        _this.togglePopup = function (state) {
            _this.combobox.togglePopup(state);
        };
        /**
         * @hidden
         */
        _this.setValueSelection = function (value, text, selected, state) {
            if (value === void 0) { value = undefined; }
            if (text === void 0) { text = undefined; }
            if (selected === void 0) { selected = undefined; }
            _this.combobox.setValueSelection(value, text, selected, state);
        };
        var allowCustom = props.allowCustom, opened = props.opened, textField = props.textField, valueField = props.valueField;
        var value = (props.value !== undefined) ? props.value : props.defaultValue;
        var selected = -1;
        var text = '';
        if (allowCustom && value !== undefined) {
            text = util_1.getItemText(value, textField);
            selected = util_1.getItemIndex(props, value);
        }
        else if (!allowCustom) {
            selected = util_1.getItemIndex(props, value);
            text = util_1.getText(props, selected);
        }
        _this.state = {
            filterText: _this.props.filter || '',
            typedText: '',
            text: text,
            selectedIndex: selected,
            skip: 0,
            isFocused: opened,
            opened: opened
        };
        var dropdown = new DropDownBase_1.default(_this);
        _this.combobox = new ComboBoxBase_1.default(dropdown);
        dropdown.value = util_1.getItemValue(value, valueField);
        dropdown.index = selected;
        dropdown.text = text;
        _this._inputId = kendo_react_common_1.guid();
        return _this;
    }
    Object.defineProperty(ComboBox.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "value", {
        /**
         * ComboBox value
         */
        get: function () {
            return this.combobox.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "index", {
        /**
         * The index of the selected item
         */
        get: function () {
            return this.combobox.index;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ComboBox.prototype.componentWillReceiveProps = function (nextProps) {
        this.combobox.componentWillReceiveProps(nextProps);
    };
    /**
     * @hidden
     */
    ComboBox.prototype.componentWillUpdate = function (nextProps, nextState) {
        this.combobox.componentWillUpdate(nextProps, nextState);
    };
    /**
     * @hidden
     */
    ComboBox.prototype.componentDidUpdate = function (_, prevState) {
        this.combobox.componentDidUpdate(prevState);
    };
    /**
     * @hidden
     */
    ComboBox.prototype.componentDidMount = function () {
        this.combobox.componentDidMount();
    };
    /**
     * @hidden
     */
    ComboBox.prototype.componentWillUnmount = function () {
        this.combobox.componentWillUnmount();
    };
    /**
     * @hidden
     */
    ComboBox.prototype.onNavigate = function (event) {
        this.combobox.onNavigate(event);
    };
    /**
     * @hidden
     */
    ComboBox.prototype.render = function () {
        var _this = this;
        var _a = this.props, dir = _a.dir, disabled = _a.disabled, clearButton = _a.clearButton, label = _a.label, className = _a.className, style = _a.style, loading = _a.loading, iconClassName = _a.iconClassName;
        var isFocused = this.state.isFocused;
        var text = this.combobox.valueToRender().text;
        var renderClearButton = !!(clearButton && text);
        var dropdown = this.combobox.dropdown;
        var combobox = (React.createElement("span", { className: kendo_react_common_1.classNames('k-widget k-combobox k-header', { 'k-combobox-clearable': clearButton }, className), ref: function (combo) { _this._element = combo; }, style: !label
                ? style
                : __assign({}, style, { width: undefined }), dir: dir },
            React.createElement("span", { ref: function (wrapper) { dropdown.wrapper = wrapper; }, className: kendo_react_common_1.classNames('k-dropdown-wrap', {
                    'k-state-default': !disabled,
                    'k-state-disabled': disabled,
                    'k-state-focused': isFocused && !disabled
                }) },
                this.combobox.renderSearchBar(renderClearButton, text, this._inputId),
                React.createElement("span", { className: "k-select", onClick: dropdown.handleWrapperClick, onMouseDown: function (e) {
                        e.preventDefault();
                        // Open animation fails if is not focused
                        _this.setState({
                            isFocused: true
                        });
                    } },
                    React.createElement("span", { className: kendo_react_common_1.classNames('k-icon', iconClassName, {
                            'k-i-arrow-s': !loading && !iconClassName,
                            'k-i-loading': loading && !iconClassName
                        }) }))),
            this.combobox.renderListContainer()));
        return label
            ? (React.createElement(kendo_react_common_1.FloatingLabel, { label: label, value: text, style: { width: style ? style.width : undefined }, id: this._inputId, children: combobox }))
            : combobox;
    };
    /**
     * @hidden
     */
    ComboBox.prototype.applyInputValue = function (value, state, eventKey) {
        this.combobox.applyInputValue(value, state, eventKey);
    };
    /**
     * @hidden
     */
    ComboBox.propTypes = __assign({}, ComboBoxBase_1.default.propTypes, { allowCustom: PropTypes.bool, clearButton: PropTypes.bool, iconClassName: PropTypes.string });
    /**
     * @hidden
     */
    ComboBox.defaultProps = __assign({}, ComboBoxBase_1.default.defaultProps, { allowCustom: false, clearButton: true });
    return ComboBox;
}(React.Component));
exports.default = ComboBox;
//# sourceMappingURL=ComboBox.js.map