"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var DropDownWrapper_1 = require("./DropDownWrapper");
var ListContainer_1 = require("../common/ListContainer");
var ListFilter_1 = require("../common/ListFilter");
var ListDefaultItem_1 = require("../common/ListDefaultItem");
var List_1 = require("../common/List");
var DropDownBase_1 = require("../common/DropDownBase");
var VirtualScroll_1 = require("../common/VirtualScroll");
var util_1 = require("../common/util");
var defaultItemKey = 0;
var listKey = 1;
var preventDefault = function (event) {
    if (event.target.nodeName !== 'INPUT') {
        event.preventDefault();
    }
};
var DropDownList = /** @class */ (function (_super) {
    __extends(DropDownList, _super);
    function DropDownList(props) {
        var _this = _super.call(this, props) || this;
        _this.vs = new VirtualScroll_1.default();
        _this._lastMousedown = 0;
        _this.searchState = { word: '', last: '' };
        /**
         * @hidden
         */
        _this.handleItemSelect = function (index, state) {
            _this.base.handleItemSelect(index, state);
        };
        /**
         * @hidden
         */
        _this.setValueSelection = function (value, text, selected, state) {
            if (value === void 0) { value = undefined; }
            if (text === void 0) { text = undefined; }
            if (selected === void 0) { selected = undefined; }
            if (_this.state.selectedIndex !== selected) {
                state.data.selectedIndex = selected;
            }
            _this.base.value = value;
            _this.base.text = text;
            _this.base.index = selected;
        };
        /**
         * @hidden
         */
        _this.togglePopup = function (state) {
            _this.base.togglePopup(state);
            if (!_this.state.opened) {
                _this.base.calculatePopupWidth();
            }
            if (_this.props.filterable && _this.state.filterInputFocused) {
                state.data.filterInputFocused = false;
            }
        };
        _this.renderDropDownWrapper = function () {
            var _a = _this.props, defaultItem = _a.defaultItem, valueField = _a.valueField, textField = _a.textField, disabled = _a.disabled, tabIndex = _a.tabIndex, loading = _a.loading, iconClassName = _a.iconClassName, valueRender = _a.valueRender;
            var _b = _this.state, opened = _b.opened, isFocused = _b.isFocused;
            var value = _this.value;
            var index = _this.base.index;
            var text = _this.base.text;
            if (!util_1.isPresent(value) && defaultItem !== undefined) {
                value = util_1.getItemValue(defaultItem, valueField);
                text = util_1.getItemText(defaultItem, textField);
            }
            var valueDefaultRendering = (React.createElement("span", { className: "k-input" }, text));
            var valueElement = valueRender !== undefined ?
                valueRender.call(undefined, valueDefaultRendering, value) : valueDefaultRendering;
            return (React.createElement(DropDownWrapper_1.default, { disabled: disabled, focused: isFocused, tabIndex: tabIndex, ariaExpanded: opened || false, ariaOwns: _this.base.listBoxId, ariaActiveDescendant: _this.base.optionPrefix + '-' + index, onFocus: _this.handleFocus, onBlur: _this.handleBlur, onClick: _this.base.handleWrapperClick, onKeyDown: _this.base.handleKeyDown, onKeyPress: _this.handleKeyPress, ref: function (wrapper) { _this.base.wrapper = wrapper; } },
                valueElement,
                React.createElement("span", { className: "k-select" },
                    React.createElement("span", { className: kendo_react_common_1.classNames('k-icon', iconClassName, {
                            'k-i-arrow-s': !loading && !iconClassName,
                            'k-i-loading': loading && !iconClassName
                        }) }))));
        };
        _this.renderListContainer = function () {
            var _a = _this.props, header = _a.header, footer = _a.footer;
            var popupSettings = _this.base.getPopupSettings();
            var opened = _this.state.opened;
            var virtual = _this.props.virtual !== undefined;
            var listContainerProps = {
                onMouseDown: function (e) {
                    _this._lastMousedown = new Date().getTime();
                    preventDefault(e);
                },
                dir: _this.props.dir !== undefined ? _this.props.dir : _this.base.dirCalculated,
                onBlur: _this.handleBlur,
                width: _this.base.popupWidth,
                popupSettings: {
                    className: 'k-list-container k-reset',
                    animate: popupSettings.animate,
                    anchor: _this.element || undefined,
                    show: opened,
                    open: _this.onPopupOpened,
                    close: _this.onPopupClosed
                }
            };
            return (React.createElement(ListContainer_1.default, __assign({}, listContainerProps),
                _this.renderListFilter(),
                virtual ? _this.renderDefaultItem() : undefined,
                virtual && header,
                _this.base.renderScrollWrapper(!virtual ? [
                    _this.renderDefaultItem(),
                    header,
                    _this.renderList(),
                    footer,
                    _this.base.renderScrollElement()
                ] : [
                    _this.renderList(),
                    _this.base.renderScrollElement()
                ]),
                virtual && footer));
        };
        _this.renderList = function () {
            var _a = _this.props, data = _a.data, textField = _a.textField, valueField = _a.valueField, defaultItem = _a.defaultItem, listNoDataRender = _a.listNoDataRender, itemRender = _a.itemRender;
            var vs = _this.base.vs;
            var _b = _this.state, opened = _b.opened, skip = _b.skip;
            var popupSettings = _this.base.getPopupSettings();
            var translate = "translateY(" + _this.vs.translate + "px)";
            var value = _this.value;
            var selectedIndex = util_1.getItemIndex(_this.props, value);
            var hasSelected = !(selectedIndex < 0 && !defaultItem);
            return (React.createElement(List_1.default, { id: _this.base.listBoxId, show: opened, data: (data || []).slice(), focusedIndex: !hasSelected && skip === 0 ? 0 : undefined, value: value, textField: textField, valueField: valueField, optionPrefix: _this.base.optionPrefix, listRef: function (element) {
                    if (vs.enabled) {
                        vs.list = element;
                    }
                    _this.base.list = element;
                }, wrapperStyle: !vs.enabled ?
                    { maxHeight: popupSettings.height } : { float: 'left', width: '100%' }, wrapperCssClass: !vs.enabled ? 'k-list-scroller' : undefined, listStyle: vs.enabled ?
                    { transform: translate } : undefined, key: listKey, skip: skip, onClick: _this.base.handleItemClick, itemRender: itemRender, noDataRender: listNoDataRender }));
        };
        _this.renderListFilter = function () {
            var filterable = _this.props.filterable;
            var _a = _this.state, opened = _a.opened, filterText = _a.filterText, filterInputFocused = _a.filterInputFocused;
            return filterable && (React.createElement(ListFilter_1.default, { value: filterText, focused: opened && filterInputFocused, willFocus: _this.filteringInputWillFocus, didFocus: _this.filteringInputDidFocus, onChange: _this.handleListFilterChange, onKeyDown: _this.base.handleKeyDown }));
        };
        _this.renderDefaultItem = function () {
            var _a = _this.props, textField = _a.textField, defaultItem = _a.defaultItem;
            return defaultItem && (React.createElement(ListDefaultItem_1.default, { defaultItem: defaultItem, textField: textField, selected: _this.index === -1, key: defaultItemKey, onClick: _this.handleDefaultItemClick }));
        };
        _this.search = function (event) {
            clearTimeout(_this._typingTimeout);
            if (!_this.props.filterable) {
                _this._typingTimeout = setTimeout(function () { return _this.searchState.word = ''; }, _this.props.delay);
                _this.selectNext(event);
            }
        };
        _this.selectNext = function (event) {
            var data = (_this.props.data || []).map(function (item, idx) {
                return { item: item, itemIndex: idx };
            });
            var word = _this.searchState.word;
            var last = _this.searchState.last;
            var isInLoop = util_1.sameCharsOnly(word, last);
            var dataLength = data.length;
            var startIndex = _this.state.selectedIndex || 0;
            var defaultItem;
            if (_this.props.defaultItem) {
                defaultItem = { item: _this.props.defaultItem, itemIndex: -1 };
                dataLength += 1;
                startIndex += 1;
            }
            startIndex += isInLoop ? 1 : 0;
            data = util_1.shuffleData(data, startIndex, defaultItem);
            var text, loopMatch, nextMatch, index = 0;
            var _a = _this.props, textField = _a.textField, ignoreCase = _a.ignoreCase;
            for (; index < dataLength; index++) {
                text = util_1.getter(data[index].item, textField);
                loopMatch = isInLoop && util_1.matchText(text, last, ignoreCase);
                nextMatch = util_1.matchText(text, word, ignoreCase);
                if (loopMatch || nextMatch) {
                    index = data[index].itemIndex;
                    break;
                }
            }
            if (index !== dataLength) {
                var state = _this.base.initState();
                state.syntheticEvent = event;
                _this.handleItemSelect(index, state);
                _this.base.applyState(state);
            }
        };
        _this.handleFocus = function (event) {
            _this.base.handleFocus(event);
        };
        _this.handleBlur = function (event) {
            if (_this.state.isFocused && !_this._filteringWillFocus) {
                var time = new Date().getTime();
                if (time - _this._lastMousedown < 500) {
                    _this._lastMousedown = 0;
                    return event.target.focus();
                }
                var state = _this.base.initState();
                state.data.isFocused = false;
                state.data.filterInputFocused = false;
                state.data.opened = false;
                state.events.push({ type: 'onBlur' });
                state.syntheticEvent = event;
                if (_this.state.opened) {
                    state.events.push({ type: 'onClose' });
                }
                _this.base.applyState(state);
            }
        };
        _this.handleDefaultItemClick = function (index, event) {
            var state = _this.base.initState();
            var _a = _this.props, defaultItem = _a.defaultItem, valueField = _a.valueField, textField = _a.textField;
            _this.togglePopup(state);
            var value = util_1.getItemValue(defaultItem, valueField);
            var text = util_1.getItemText(defaultItem, textField);
            _this.setValueSelection(value, text, index, state);
            state.events.push({ type: 'onChange' });
            state.syntheticEvent = event;
            _this.base.applyState(state);
        };
        _this.handleKeyPress = function (event) {
            if (_this.props.filterable || event.which === 0 || event.keyCode === 13 /* enter */) {
                return;
            }
            var character = String.fromCharCode(event.charCode || event.keyCode);
            if (_this.props.ignoreCase) {
                character = character.toLowerCase();
            }
            if (character === ' ') {
                event.preventDefault();
            }
            _this.searchState = {
                word: _this.searchState.word + character,
                last: _this.searchState.last + character
            };
            _this.search(event);
        };
        _this.handleListFilterChange = function (event) {
            var state = _this.base.initState();
            _this.base.filterChanged(event.target.value, state);
            state.syntheticEvent = event;
            _this.base.applyState(state);
        };
        _this.filteringInputWillFocus = function () {
            _this._filteringWillFocus = true;
        };
        _this.filteringInputDidFocus = function () {
            _this._filteringWillFocus = false;
        };
        _this.onPopupOpened = function () {
            _this.base.vs.hidden = false;
            if (_this.props.filterable) {
                _this.setState({
                    filterInputFocused: true
                });
            }
        };
        _this.onPopupClosed = function () {
            _this.base.vs.hidden = true;
            if (_this.state.isFocused) {
                var wrapper_1 = ReactDOM.findDOMNode(_this.base.wrapper);
                setTimeout(function () { if (_this.state.isFocused) {
                    wrapper_1.focus();
                } }, 0);
            }
        };
        var value = (props.value !== undefined) ? props.value : props.defaultValue;
        var selected = -1;
        var text = '';
        if (!util_1.isPresent(value) && util_1.isPresent(props.defaultItem)) {
            value = util_1.getItemValue(props.defaultItem, props.valueField);
            text = util_1.getItemText(props.defaultItem, props.textField);
        }
        else {
            selected = util_1.getItemIndex(props, value);
            text = util_1.getItemText((props.data || [])[selected], props.textField);
        }
        var _a = _this.props, filter = _a.filter, filterable = _a.filterable, opened = _a.opened;
        _this.state = {
            filterText: filter || '',
            selectedIndex: selected,
            skip: 0,
            isFocused: opened,
            filterInputFocused: filterable && opened,
            opened: opened,
        };
        _this.base = new DropDownBase_1.default(_this);
        _this.base.index = selected;
        _this.base.value = value;
        _this.base.text = text;
        return _this;
    }
    Object.defineProperty(DropDownList.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownList.prototype, "value", {
        /**
         * DropDownList value
         */
        get: function () {
            return this.base.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownList.prototype, "index", {
        /**
         * The index of the selected item
         */
        get: function () {
            return this.base.index;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DropDownList.prototype.componentWillReceiveProps = function (nextProps) {
        this.base.componentWillReceiveProps(nextProps);
    };
    /**
     * @hidden
     */
    DropDownList.prototype.componentWillUpdate = function (nextProps, nextState) {
        this.base.componentWillUpdate(nextProps, nextState);
    };
    /**
     * @hidden
     */
    DropDownList.prototype.componentDidUpdate = function (_, prevState) {
        if (!this.base.getPopupSettings().animate) {
            if (!prevState.opened && this.state.opened) {
                this.onPopupOpened();
            }
            else if (prevState.opened && !this.state.opened) {
                this.onPopupClosed();
            }
        }
        this.base.componentDidUpdate(prevState);
    };
    /**
     * @hidden
     */
    DropDownList.prototype.componentDidMount = function () {
        this.base.componentDidMount();
    };
    /**
     * @hidden
     */
    DropDownList.prototype.componentWillUnmount = function () {
        this.base.componentWillUnmount();
    };
    /**
     * @hidden
     */
    DropDownList.prototype.onNavigate = function (event) {
        var _a = this.props, data = _a.data, filterable = _a.filterable, defaultItem = _a.defaultItem;
        var state = this.base.initState();
        state.syntheticEvent = event;
        var vs = this.base.vs;
        var index = util_1.getItemIndex(this.props, this.value);
        this.base.navigation.navigate({
            opened: this.state.opened,
            event: event,
            state: state,
            currentIndex: vs.skip + index,
            max: (vs.enabled ? vs.total : (data || []).length) - 1,
            min: defaultItem ? -1 : 0,
            leftRightKeysNavigation: filterable,
            togglePopup: this.togglePopup,
            handleItemSelect: this.handleItemSelect
        });
        this.base.applyState(state);
    };
    /**
     * @hidden
     */
    DropDownList.prototype.render = function () {
        var _this = this;
        var _a = this.props, style = _a.style, className = _a.className, label = _a.label, dir = _a.dir;
        var opened = this.state.opened;
        var text = util_1.getText(this.props, util_1.getItemIndex(this.props, this.value));
        var dropdownlist = (React.createElement("span", { ref: function (dropdown) { _this._element = dropdown; }, className: kendo_react_common_1.classNames('k-widget k-dropdown k-header', className), style: !label
                ? style
                : __assign({}, style, { width: undefined }), dir: dir, onMouseDown: opened ? preventDefault : undefined },
            this.renderDropDownWrapper(),
            this.renderListContainer()));
        return label
            ? (React.createElement(kendo_react_common_1.FloatingLabel, { label: label, value: text, style: { width: style ? style.width : undefined }, children: dropdownlist }))
            : dropdownlist;
    };
    /**
     * @hidden
     */
    DropDownList.propTypes = __assign({ delay: PropTypes.number, ignoreCase: PropTypes.bool, iconClassName: PropTypes.string, defaultItem: PropTypes.any, valueRender: PropTypes.func }, DropDownBase_1.default.propTypes);
    /**
     * @hidden
     */
    DropDownList.defaultProps = __assign({ delay: 500, ignoreCase: true }, DropDownBase_1.default.defaultProps);
    return DropDownList;
}(React.Component));
exports.default = DropDownList;
//# sourceMappingURL=DropDownList.js.map