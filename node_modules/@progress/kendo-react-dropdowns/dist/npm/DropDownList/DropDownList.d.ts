/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { DropDownListProps } from './DropDownListProps';
import { DropDownStateBase, InternalState } from './../common/settings';
/**
 * @hidden
 */
export interface DropDownListState extends DropDownStateBase {
    filterInputFocused?: boolean;
}
/**
 * @hidden
 */
export interface DropDownListInternalState extends InternalState {
    data: DropDownListState;
}
export default class DropDownList extends React.Component<DropDownListProps, DropDownListState> {
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<any>;
        valueField: PropTypes.Requireable<any>;
        virtual: PropTypes.Requireable<any>;
        onFilterChange: PropTypes.Requireable<any>;
        onPageChange: PropTypes.Requireable<any>;
        opened: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        data: PropTypes.Requireable<any>;
        textField: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        label: PropTypes.Requireable<any>;
        loading: PropTypes.Requireable<any>;
        popupSettings: PropTypes.Requireable<any>;
        onOpen: PropTypes.Requireable<any>;
        onClose: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        itemRender: PropTypes.Requireable<any>;
        listNoDataRender: PropTypes.Requireable<any>;
        header: PropTypes.Requireable<any>;
        footer: PropTypes.Requireable<any>;
        delay: PropTypes.Requireable<any>;
        ignoreCase: PropTypes.Requireable<any>;
        iconClassName: PropTypes.Requireable<any>;
        defaultItem: PropTypes.Requireable<any>;
        valueRender: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        tabIndex: number;
        popupSettings: {
            animate: boolean;
            height: string;
        };
        delay: number;
        ignoreCase: boolean;
    };
    private _element;
    private _filteringWillFocus;
    private _typingTimeout;
    private vs;
    private _lastMousedown;
    private readonly base;
    private searchState;
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    /**
     * DropDownList value
     */
    readonly value: any;
    /**
     * The index of the selected item
     */
    readonly index: number;
    constructor(props: DropDownListProps);
    /**
     * @hidden
     */
    componentWillReceiveProps(nextProps: DropDownListProps): void;
    /**
     * @hidden
     */
    componentWillUpdate(nextProps: DropDownListProps, nextState: DropDownListState): void;
    /**
     * @hidden
     */
    componentDidUpdate(_: DropDownListProps, prevState: DropDownListState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    handleItemSelect: (index: number, state: DropDownListInternalState) => void;
    /**
     * @hidden
     */
    onNavigate(event: React.KeyboardEvent<HTMLElement>): void;
    /**
     * @hidden
     */
    setValueSelection: (value: any, text: any, selected: any, state: DropDownListInternalState) => void;
    /**
     * @hidden
     */
    togglePopup: (state: DropDownListInternalState) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private renderDropDownWrapper;
    private renderListContainer;
    private renderList;
    private renderListFilter;
    private renderDefaultItem;
    private search;
    private selectNext;
    private handleFocus;
    private handleBlur;
    private handleDefaultItemClick;
    private handleKeyPress;
    private handleListFilterChange;
    private filteringInputWillFocus;
    private filteringInputDidFocus;
    private onPopupOpened;
    private onPopupClosed;
}
