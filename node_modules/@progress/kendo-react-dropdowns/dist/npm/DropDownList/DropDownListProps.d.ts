/// <reference types="react" />
import DropDownList from './DropDownList';
import { FilterChangeEvent, ChangeEvent, OpenEvent, CloseEvent, FocusEvent, BlurEvent, PageChangeEvent } from './../common/events';
import { VirtualizationSettings, PopupSettings } from '../common/settings';
import { ListItemProps } from '../common/ListItem';
/**
 * Represents the object of the `filterChange` DropDownList event.
 */
export interface DropDownListFilterChangeEvent extends FilterChangeEvent<DropDownList> {
}
/**
 * Represents the object of the `change` DropDownList event.
 */
export interface DropDownListChangeEvent extends ChangeEvent<DropDownList> {
}
/**
 * Represents the object of the `open` DropDownList event.
 */
export interface DropDownListOpenEvent extends OpenEvent<DropDownList> {
}
/**
 * Represents the object of the `close` DropDownList event.
 */
export interface DropDownListCloseEvent extends CloseEvent<DropDownList> {
}
/**
 * Represents the object of the `focus` DropDownList event.
 */
export interface DropDownListFocusEvent extends FocusEvent<DropDownList> {
}
/**
 * Represents the object of the `blur` DropDownList event.
 */
export interface DropDownListBlurEvent extends BlurEvent<DropDownList> {
}
/**
 * Represents the object of the `pageChange` DropDownList event.
 */
export interface DropDownListPageChangeEvent extends PageChangeEvent<DropDownList> {
}
/**
 * The props of the DropDownList.
 */
export interface DropDownListProps {
    /**
     * Sets the data of the DropDownList.
     */
    data?: any[];
    /**
     * Sets the text of the default empty item. The type of the defined value has to match the data type.
     */
    defaultItem?: any;
    /**
     * Sets the delay before an item search is performed. When filtration is disabled, use this option.
     */
    delay?: number;
    /**
     * Enables a case-insensitive search. When filtering is disabled, use this option.
     */
    ignoreCase?: boolean;
    /**
     * Sets the opened and closed state of the DropDownList.
     */
    opened?: boolean;
    /**
     * The styles that are applied to the DropDownList.
     */
    style?: React.CSSProperties;
    /**
     * Sets the value of the DropDownList.
     * It can either be of the primitive (string, numbers) or of the complex (objects) type.
     */
    value?: any;
    /**
     * Sets the default value of the DropDownList.
     * Similar to the native `select` HTML element.
     */
    defaultValue?: any;
    /**
     * Sets additional classes to the DropDownList.
     */
    className?: string;
    /**
     * Sets CSS classes to the expand `icon` DOM element.
     */
    iconClassName?: string;
    /**
     * Sets the disabled state of the DropDownList.
     */
    disabled?: boolean;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Enables the filtering functionality of the DropDownList.
     */
    filterable?: boolean;
    /**
     * Sets the value of filtering input.
     * Useful for making the filtering input a
     * [controlled component](https://reactjs.org/docs/forms.html#controlled-components).
     */
    filter?: string;
    /**
     * Sets the loading state of the DropDownList.
     */
    loading?: boolean;
    /**
     * Specifies the `tabIndex` of the DropDownList.
     */
    tabIndex?: number;
    /**
     * Sets the data item field that represents the item text.
     * If the data contains only primitive values, do not define it.
     */
    textField?: string;
    /**
     * Sets the data item field that represents the item value.
     * If the data contains only primitive values, do not define it.
     */
    valueField?: string;
    /**
     * Renders a floating label for the DropDownList component.
     */
    label?: string;
    /**
     * Configures the popup of the DropDownList.
     */
    popupSettings?: PopupSettings;
    /**
     * Configures the virtual scrolling of the DropDownList.
     */
    virtual?: VirtualizationSettings;
    /**
     * Fires each time the popup of the DropDownList is about to open.
     */
    onOpen?: (event: DropDownListOpenEvent) => void;
    /**
     * Fires each time the popup of the DropDownList is about to close.
     */
    onClose?: (event: DropDownListCloseEvent) => void;
    /**
     * Fires each time the user focuses the DropDownList.
     */
    onFocus?: (event: DropDownListFocusEvent) => void;
    /**
     * Fires each time the DropDownList gets blurred.
     */
    onBlur?: (event: DropDownListBlurEvent) => void;
    /**
     * Fires each time the value of the DropDownList is about to change.
     */
    onChange?: (event: DropDownListChangeEvent) => void;
    /**
     * Fires each time the user types in the filter input.
     * You can filter the source based on the passed filtration value.
     */
    onFilterChange?: (event: DropDownListFilterChangeEvent) => void;
    /**
     * Fires when both the virtual scrolling of the DropDownList is enabled
     * and the component requires data for another page.
     */
    onPageChange?: (event: DropDownListPageChangeEvent) => void;
    /**
     * Fires when a DropDownList item is about to be rendered.
     * Used to override the default appearance of the list items.
     */
    itemRender?: (li: React.ReactElement<HTMLLIElement>, itemProps: ListItemProps) => React.ReactNode;
    /**
     * Fires when the element which renders the value is about to be rendered.
     * Used to override the default appearance of the element.
     */
    valueRender?: (element: React.ReactElement<HTMLSpanElement>, value: any) => React.ReactNode;
    /**
     * Fires when the element which indicates no data in the popup is about to be rendered.
     * Used to override the default appearance of the element.
     */
    listNoDataRender?: (element: React.ReactElement<HTMLDivElement>) => React.ReactNode;
    /**
     * Sets the header component of the DropDownList.
     */
    header?: React.ReactNode;
    /**
     * Sets the footer component of the DropDownList.
     */
    footer?: React.ReactNode;
}
