/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import DropDownBase, { DropDownComponent, DropDownComponentProps } from '../common/DropDownBase';
import { ComboBoxState, ComboInternalState } from '../ComboBox/ComboBox';
/**
 * @hidden
 */
export interface ComboBoxBaseState extends ComboBoxState {
    focusedIndex?: number;
}
/**
 * @hidden
 */
export interface ComboBaseInternalState extends ComboInternalState {
    data: ComboBoxBaseState;
}
/**
 * @hidden
 */
export interface ComboBoxComponent extends DropDownComponent {
    props: ComboBoxComponentProps;
    state: ComboBoxBaseState;
    value: any;
    applyInputValue: (value: string, state: ComboBaseInternalState, keyEventCode?: number) => void;
}
/**
 * @hidden
 */
export interface ComboBoxComponentProps extends DropDownComponentProps {
    suggest?: boolean;
    allowCustom?: boolean;
    placeholder?: string;
}
/**
 * @hidden
 */
export default class ComboBoxBase {
    static propTypes: {
        suggest: PropTypes.Requireable<any>;
        placeholder: PropTypes.Requireable<any>;
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<any>;
        valueField: PropTypes.Requireable<any>;
        virtual: PropTypes.Requireable<any>;
        onFilterChange: PropTypes.Requireable<any>;
        onPageChange: PropTypes.Requireable<any>;
        opened: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        data: PropTypes.Requireable<any>;
        textField: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        label: PropTypes.Requireable<any>;
        loading: PropTypes.Requireable<any>;
        popupSettings: PropTypes.Requireable<any>;
        onOpen: PropTypes.Requireable<any>;
        onClose: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        itemRender: PropTypes.Requireable<any>;
        listNoDataRender: PropTypes.Requireable<any>;
        header: PropTypes.Requireable<any>;
        footer: PropTypes.Requireable<any>;
    };
    static defaultProps: {
        tabIndex: number;
        popupSettings: {
            animate: boolean;
            height: string;
        };
    };
    dropdown: DropDownBase;
    _lastMousedown: number;
    constructor(dropdown: DropDownBase);
    readonly value: any;
    readonly index: number;
    componentWillReceiveProps(nextProps: ComboBoxComponentProps): void;
    componentWillUpdate(nextProps: ComboBoxComponentProps, nextState: ComboBoxState): void;
    componentDidUpdate(prevState: ComboBoxBaseState): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleItemSelect: (index: number, state: ComboBaseInternalState) => void;
    onNavigate(event: React.KeyboardEvent<HTMLElement>): void;
    setValueSelection: (value: any, text: any, selected: any, state: ComboBaseInternalState) => void;
    valueToRender(state?: ComboBoxState, props?: ComboBoxComponentProps): {
        value: any;
        text: string;
    };
    getFocusedIndex(text?: string): number;
    onInputKeyDown: React.KeyboardEventHandler<HTMLInputElement>;
    applyValueOnEnter(value: string, state: ComboBaseInternalState): void;
    closePopup(state: ComboBaseInternalState): void;
    applyValueOnRejectSuggestions(value: string, state: ComboBaseInternalState): void;
    selectFocusedItem(value: string, state: ComboBaseInternalState): void;
    applyInputValue(value: string, state: ComboBaseInternalState, eventKey?: number): void;
    onChangeHandler: React.FormEventHandler<HTMLInputElement>;
    handleBlur: React.FocusEventHandler<HTMLInputElement>;
    handleFocus: React.FocusEventHandler<HTMLSpanElement>;
    clearButtonClick: React.MouseEventHandler<HTMLSpanElement>;
    clearValue(state: ComboBaseInternalState, triggerChange?: boolean): void;
    suggestValue(value: string, state: ComboBaseInternalState): void;
    togglePopup: (state: ComboBaseInternalState) => void;
    renderListContainer(): JSX.Element;
    renderSearchBar(clearButton: boolean, text: string, id: string): JSX.Element;
    renderList(): JSX.Element;
}
