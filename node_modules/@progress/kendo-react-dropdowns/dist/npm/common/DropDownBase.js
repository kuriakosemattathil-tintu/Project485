"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var PropTypes = require("prop-types");
var VirtualScroll_1 = require("./VirtualScroll");
var Navigation_1 = require("./Navigation");
var util_1 = require("./util");
var kendo_react_common_1 = require("@progress/kendo-react-common");
/**
 * @hidden
 */
var DropDownBase = /** @class */ (function () {
    function DropDownBase(component) {
        var _this = this;
        this.valueDuringOnChange = undefined;
        this.previousValue = undefined;
        this.indexDuringOnChange = undefined;
        this.valueNotInData = false;
        this.text = '';
        this.lastTextSelected = '';
        this.selectedItemChanged = false;
        this.initiallyShown = false;
        this.vs = new VirtualScroll_1.default();
        this.navigation = new Navigation_1.Navigation();
        this.handleKeyDown = function (event) {
            var _a = _this.component.props, filterable = _a.filterable, disabled = _a.disabled;
            var keyCode = event.keyCode;
            if (disabled) {
                return;
            }
            var shouldNavigate = !(filterable &&
                (keyCode === 37 /* left */ || keyCode === 39 /* right */ || keyCode === 32 /* space */ || keyCode === 16 /* shift */ ||
                    keyCode === 36 /* home */ || keyCode === 35 /* end */));
            if (shouldNavigate) {
                _this.component.onNavigate(event);
            }
        };
        this.handleWrapperClick = function (event) {
            var state = _this.initState();
            _this.component.togglePopup(state);
            state.syntheticEvent = event;
            _this.applyState(state);
        };
        this.handleItemClick = function (index, event) {
            var state = _this.initState();
            _this.component.handleItemSelect(index, state);
            _this.component.togglePopup(state);
            state.syntheticEvent = event;
            _this.applyState(state);
        };
        this.handleFocus = function (event) {
            if (!_this.component.state.isFocused) {
                var state = _this.initState();
                state.data.isFocused = true;
                state.events.push({ type: 'onFocus' });
                state.syntheticEvent = event;
                _this.applyState(state);
            }
        };
        this.filterChanged = function (filterText, state) {
            var textField = _this.component.props.textField;
            state.data.filterText = filterText;
            state.events.push({
                type: 'onFilterChange',
                filter: {
                    field: textField,
                    operator: 'contains',
                    ignoreCase: true,
                    value: filterText
                }
            });
        };
        this.togglePopup = function (state) {
            state.data.isFocused = true;
            state.data.opened = !_this.component.state.opened;
            if (_this.component.state.opened) {
                state.events.push({ type: 'onClose' });
            }
            else {
                state.events.push({ type: 'onOpen' });
            }
        };
        this.pageChange = function (page, syntheticEvent) {
            if (_this.component.props.virtual) {
                var state = _this.initState();
                state.events.push({
                    type: 'onPageChange',
                    page: { skip: page.skip, take: page.take }
                });
                state.syntheticEvent = syntheticEvent;
                _this.applyState(state);
            }
        };
        this.handleItemSelect = function (index, state) {
            var skip = _this.component.state.skip || 0;
            var listItemIndex = index - skip;
            var props = _this.component.props;
            var data = props.data || [];
            var controlled = props.value !== undefined;
            if (!util_1.isPresent(index)) {
                return;
            }
            if ((listItemIndex >= 0 && listItemIndex < data.length) ||
                (listItemIndex === -1 && props.defaultItem)) {
                var newValue = util_1.getValue(props, listItemIndex);
                var newText = util_1.getText(props, listItemIndex);
                var oldValue = _this.value;
                if (controlled) {
                    _this.valueDuringOnChange = newValue;
                    _this.indexDuringOnChange = index;
                }
                else {
                    _this.value = newValue;
                    _this.index = index;
                    _this.text = newText;
                    state.data.selectedIndex = index;
                }
                if (newValue !== oldValue) {
                    state.events.push({ type: 'onChange' });
                    _this.selectedItemChanged = true;
                }
            }
            else if (props.virtual !== undefined) {
                _this.vs.handleVirtualItemSelect(state, _this.component.state, _this.vs.container, index);
                _this.valueNotInData = true;
                if (controlled) {
                    _this.indexDuringOnChange = index;
                }
                else {
                    _this.index = index;
                    state.data.selectedIndex = index;
                }
                _this.selectedItemChanged = true;
            }
        };
        // Common rendering
        this.renderScrollWrapper = function (children) {
            var popupSettings = _this.getPopupSettings();
            var vs = _this.vs;
            return vs.enabled ? (React.createElement("div", { onScroll: vs.scrollHandler, ref: vs.scrollerRef, style: {
                    height: popupSettings.height,
                    overflowY: 'scroll'
                } }, children)) :
                (children);
        };
        this.renderScrollElement = function () {
            var vs = _this.vs;
            return vs.enabled && (React.createElement("div", { ref: function (element) {
                    vs.scrollElement = element;
                }, key: 'scrollElementKey' }));
        };
        this.listBoxId = kendo_react_common_1.guid();
        this.optionPrefix = kendo_react_common_1.guid();
        this.component = component;
        this.vs.initVirtualization(component.props.virtual, undefined);
        this.vs.PageChange = this.pageChange;
        this.initiallyShown = component.props.opened === true;
    }
    Object.defineProperty(DropDownBase.prototype, "value", {
        get: function () {
            if (this.valueDuringOnChange !== undefined) {
                return this.valueDuringOnChange;
            }
            else {
                return this._value;
            }
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownBase.prototype, "index", {
        get: function () {
            if (this.indexDuringOnChange !== undefined) {
                return this.indexDuringOnChange;
            }
            else {
                return this._index;
            }
        },
        set: function (index) {
            this._index = index;
        },
        enumerable: true,
        configurable: true
    });
    DropDownBase.prototype.componentWillReceiveProps = function (nextProps) {
        var state = this.initState();
        var controlledFilterChanged = nextProps.filterable && nextProps.filter !== undefined &&
            nextProps.filter !== this.component.props.filter;
        if (nextProps.opened !== undefined) {
            state.data.opened = nextProps.opened;
        }
        if (!nextProps.filterable && this.component.state.filterText) {
            state.data.filterText = '';
        }
        else if (controlledFilterChanged) {
            state.data.filterText = nextProps.filter;
        }
        this.vs.updateVirtualization(nextProps.virtual, this.component.props.virtual, state);
        var controlled = nextProps.value !== undefined;
        var controlledValueChanged = controlled && nextProps.value !== this.component.props.value;
        if (this.selectedItemChanged || controlledValueChanged) {
            if (this.valueNotInData && !controlled) {
                var index = this.index - (state.data.skip || 0);
                this.value = util_1.getValue(nextProps, index);
                this.text = util_1.getText(nextProps, index);
            }
            else if (controlledValueChanged) {
                this.updateSelectedItem(nextProps, state);
            }
            this.lastValueSelected = this.value;
            this.lastTextSelected = this.text;
        }
        if (controlled) {
            this.previousValue = nextProps.value;
        }
        this.selectedItemChanged = false;
        this.valueNotInData = false;
        this.applyState(state);
    };
    DropDownBase.prototype.componentWillUpdate = function (nextProps, nextState) {
        if (nextState.opened && this.component.state.opened &&
            nextState.selectedIndex !== -1 &&
            (this.component.state.selectedIndex !== nextState.selectedIndex)) {
            this.scrollToSelectedItem(nextState);
        }
        if (nextProps.value !== undefined && this.value === undefined) {
            this.value = nextProps.value;
        }
    };
    DropDownBase.prototype.componentDidUpdate = function (prevState) {
        var _this = this;
        if (this.component.state.opened && !prevState.opened) {
            var scrollElement = this.vs.container;
            if (scrollElement) {
                var callback = function () {
                    if (util_1.getItemIndex(_this.component.props, _this.value) >= 0) {
                        _this.scrollToSelectedItem(_this.component.state);
                    }
                };
                this.vs.updateListScroll(this.component.state, scrollElement, callback);
            }
            else {
                this.scrollToSelectedItem(this.component.state);
            }
        }
    };
    DropDownBase.prototype.componentDidMount = function () {
        if (this.component.element) {
            this.dirCalculated = window.getComputedStyle(this.component.element).direction || undefined;
        }
        if (this.initiallyShown) {
            this.initiallyShown = false;
            this.calculatePopupWidth();
            this.component.setState({
                opened: this.component.props.opened
            });
        }
    };
    DropDownBase.prototype.componentWillUnmount = function () {
        var vs = this.vs;
        delete vs.container;
        delete vs.list;
    };
    DropDownBase.prototype.scrollToSelectedItem = function (state) {
        var listItemIndex = (state.selectedIndex || 0) - (state.skip || 0);
        this.scrollToItem(listItemIndex);
    };
    DropDownBase.prototype.scrollToItem = function (itemIndex) {
        var list = this.list || this.vs.list;
        var item = list ? list.children[0] : undefined;
        if (item && itemIndex >= 0) {
            var vs = this.vs;
            var scrollElement = (vs.container || list.parentNode);
            util_1.scrollToItem(scrollElement, item.offsetHeight, itemIndex, vs.translate, vs.enabled);
        }
    };
    DropDownBase.prototype.initState = function () {
        var state = {
            data: {},
            events: [],
            syntheticEvent: undefined
        };
        return state;
    };
    DropDownBase.prototype.applyState = function (state) {
        var _this = this;
        var eventArgs = {
            syntheticEvent: state.syntheticEvent,
            nativeEvent: state.syntheticEvent ? state.syntheticEvent.nativeEvent : undefined,
            target: this.component
        };
        if (Object.keys(state.data).length > 0) {
            this.component.setState(state.data);
        }
        state.events.forEach(function (eventData) {
            var type = eventData.type;
            delete eventData.type;
            var handler = _this.component.props[type];
            if (handler) {
                handler.call(undefined, __assign({}, eventArgs, eventData));
            }
        });
        if (state.events.findIndex(function (ev) { return ev.type === 'onChange'; }) !== -1) {
            this.previousValue = this.value;
        }
        this.indexDuringOnChange = undefined;
        this.valueDuringOnChange = undefined;
    };
    DropDownBase.prototype.calculatePopupWidth = function () {
        var popupWidth = this.getPopupSettings().width;
        var wrapper = ReactDOM.findDOMNode(this.wrapper);
        this.popupWidth = popupWidth !== undefined ? popupWidth :
            (wrapper && wrapper.offsetWidth + 'px');
    };
    DropDownBase.prototype.updateSelectedItem = function (props, state) {
        var value = props.value !== undefined ? props.value : this.value;
        var selected = util_1.getItemIndex(props, value);
        var text = util_1.getText(props, selected);
        var defaultItemValue = props.defaultItem ?
            util_1.getItemValue(props.defaultItem, props.valueField) : undefined;
        if (util_1.isPresent(value) && selected === -1 && defaultItemValue === undefined) {
            return;
        }
        if (selected === -1 && defaultItemValue !== undefined) {
            value = defaultItemValue;
            text = util_1.getItemText(props.defaultItem, this.component.props.textField);
        }
        selected = selected !== -1 ? selected + (state.data.skip || 0) : selected;
        this.text = text;
        if (this.component.setValueSelection) {
            this.component.setValueSelection(value, text, selected, state);
        }
    };
    DropDownBase.prototype.getPopupSettings = function () {
        return Object
            .assign({}, DropDownBase.defaultProps.popupSettings, this.component.props.popupSettings);
    };
    DropDownBase.basicPropTypes = {
        opened: PropTypes.bool,
        disabled: PropTypes.bool,
        dir: PropTypes.string,
        tabIndex: PropTypes.number,
        data: PropTypes.array,
        textField: PropTypes.string,
        className: PropTypes.string,
        label: PropTypes.string,
        loading: PropTypes.bool,
        popupSettings: PropTypes.shape({
            animate: PropTypes.bool,
            width: PropTypes.string,
            height: PropTypes.string
        }),
        onOpen: PropTypes.func,
        onClose: PropTypes.func,
        onFocus: PropTypes.func,
        onBlur: PropTypes.func,
        onChange: PropTypes.func,
        itemRender: PropTypes.func,
        listNoDataRender: PropTypes.func,
        header: PropTypes.node,
        footer: PropTypes.node
    };
    DropDownBase.propTypes = __assign({}, DropDownBase.basicPropTypes, { value: PropTypes.any, defaultValue: PropTypes.any, filterable: PropTypes.bool, valueField: PropTypes.string, virtual: PropTypes.shape({
            pageSize: PropTypes.number.isRequired,
            skip: PropTypes.number.isRequired,
            total: PropTypes.number.isRequired
        }), onFilterChange: PropTypes.func, onPageChange: PropTypes.func });
    DropDownBase.defaultProps = {
        tabIndex: 0,
        popupSettings: {
            animate: true,
            height: '200px'
        }
    };
    return DropDownBase;
}());
exports.default = DropDownBase;
//# sourceMappingURL=DropDownBase.js.map